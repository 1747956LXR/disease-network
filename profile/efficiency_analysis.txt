Timer unit: 1e-06 s

Total time: 0 s
File: ../model/cHawk.py
Function: intensity at line 51

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    51                                               @profile
    52                                               def intensity(self, t, i, d):
    53                                                   j = np.searchsorted(self.t[i], t)
    54                                                   return self.u[d] @ self.f[i][j - 1] + np.sum(
    55                                                       self.A[d][self.d[i][:j]] * g(t - self.t[i][:j]))

Total time: 0 s
File: ../model/cHawk.py
Function: loss at line 57

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                               @profile
    58                                               def loss(self):
    59                                                   res = 0
    60                                           
    61                                                   # L1, L2 regularization
    62                                                   res += L1 * np.sum(np.abs(self.A))
    63                                                   res += 1 / 2 * L2 * np.sum(self.u * self.u)
    64                                           
    65                                                   # log-likelihood
    66                                                   log_likelihood = 0
    67                                                   for i in self.patients:
    68                                                       T = self.t[i][-1]  #
    69                                           
    70                                                       for d in self.diseases:
    71                                                           disease_d = (self.d[i] == d)
    72                                           
    73                                                           if disease_d.any():
    74                                                               tijs = self.t[i][disease_d]
    75                                                               log_likelihood += sum(
    76                                                                   np.log(self.intensity(tij, i, d)) for tij in tijs)
    77                                           
    78                                                           log_likelihood -= self.u[d] @ sum(
    79                                                               self.f[i][j] * (self.t[i][j + 1] - self.t[i][j])
    80                                                               for j in range(len(self.t[i]) - 1))
    81                                                           log_likelihood -= self.u[d] @ \
    82                                                               self.f[i][-1] * (T - self.t[i][-1])
    83                                           
    84                                                           log_likelihood -= np.sum(
    85                                                               G(T - self.t[i]) * self.A[d][self.d[i]])
    86                                           
    87                                                   res -= log_likelihood
    88                                           
    89                                                   return res

Total time: 0 s
File: ../model/cHawk.py
Function: grad at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                               @profile
    92                                               def grad(self):
    93                                                   grad_A = np.zeros_like(self.A)
    94                                                   grad_u = np.zeros_like(self.u)
    95                                           
    96                                                   # grad_A
    97                                                   for d in range(self.D):
    98                                                       for dk in range(self.D):
    99                                           
   100                                                           gradient = 0
   101                                                           for i in self.patients:
   102                                                               disease_d = (self.d[i] == d)
   103                                                               if disease_d.any():
   104                                                                   tijs = self.t[i][disease_d]
   105                                                                   tiks = self.t[i][self.d[i] == dk]
   106                                           
   107                                                                   T = self.t[i][-1]  #
   108                                           
   109                                                                   for tij in tijs:
   110                                                                       intensity_ij = self.intensity(tij, i, d)
   111                                                                       for tik in tiks:
   112                                                                           if tik < tij:
   113                                                                               self.vis[d][dk] = 1
   114                                                                               gradient += g(tij - tik) / intensity_ij
   115                                           
   116                                                                           gradient -= G(T - tik)  #
   117                                           
   118                                                           gradient = -gradient
   119                                                           gradient += L1 * np.sign(grad_A[d][dk])
   120                                                           grad_A[d][dk] = gradient
   121                                           
   122                                                   # grad_u
   123                                                   for d in range(self.D):
   124                                                       gradient = 0
   125                                                       for i in self.patients:
   126                                                           disease_d = (self.d[i] == d)
   127                                                           if disease_d.any():
   128                                                               gradient += sum(
   129                                                                   self.f[i][disease_d][k] /
   130                                                                   self.intensity(self.t[i][disease_d][k], i, d)
   131                                                                   for k in range(np.sum(disease_d)))
   132                                           
   133                                                           tijs = self.t[i]
   134                                                           fijs = self.f[i]
   135                                                           T = self.t[i][-1]  #
   136                                           
   137                                                           gradient -= sum(fijs[j] * (tijs[j + 1] - tijs[j])
   138                                                                           for j in range(len(tijs) - 1))
   139                                           
   140                                                       gradient = -gradient
   141                                                       gradient += L2 * self.u[d]
   142                                                       grad_u[d] = gradient
   143                                           
   144                                                   return grad_A, grad_u

